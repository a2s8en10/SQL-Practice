-- 1. Write a query to select all columns from the `customer` table.
SELECT *
FROM Customer;
SELECT *
FROM Officers;
USE DRL_Practice;

-- 2. How do you select only `customer_name` and `age` columns from the `customer` table?
SELECT customer_name , age
FROM Customer;

-- 3. Can we use `SELECT` without `FROM`? Give an example.
-- Apply the all math operations
SELECT 22+22 as Add_Two_Numbers;
SELECT 11*10 as Multiply_Two_Numbers;

-- 4. Write a query to display the current date. 
SELECT GETDATE() AS DATE;

-- 5. Write a query to convert "anurag" into uppercase 
SELECT UPPER('anurag');
SELECT LOWER('ANURAG');

-- 6. Write a query to select customers whose age is greater than 25
SELECT *
FROM Customer
WHERE age > 25;

-- 7. How do you select customers whose `prime_status` is NULL? 
SELECT *
FROM Customer
WHERE prime_status IS NULL;

-- 8. Write a query to find customers living in the city `Delhi`. 
SELECT *
FROM Customer
WHERE city = 'Delhi';

-- 9. How do you filter customers whose `age` is less than 18? 
SELECT *
FROM Customer
WHERE age < 18;

-- 10. Write a query to display all customers except those in `Mumbai`. 
SELECT *
FROM Customer
WHERE city != 'Mumbai';

-- 11. Write a query to get customers with age between 20 and 40.
SELECT *
FROM Customer
WHERE age BETWEEN 20 AND 40;

-- 12. How do you get all customers with age NOT between 30 and 50?
SELECT *
FROM Customer
WHERE age NOT BETWEEN 30 AND 50;

-- 14. Use `BETWEEN` to select customers whose salary is between 30,000 and 50,000.  
SELECT *
FROM Officers
WHERE salary BETWEEN 30000 AND 50000;

-- 15. Use `BETWEEN` to find officers whose `joining_year` is between 2010 and 2020. 
SELECT *
FROM Officers
WHERE joining_year BETWEEN 2010 AND 2020;

-- 16. Write a query to find officers with names in (`Lakshay`, `Maharana Pratap`, `Deepika`).  
SELECT *
FROM Officers
WHERE officer_name IN ('Lakshay', 'Maharana Pratap', 'Deepika');

-- 17. How do you select customers from cities `Delhi`, `Mumbai`, and `Kolkata`?
SELECT *
FROM Customer
WHERE city IN ('Delhi', 'Mumbai', 'Kolkata');

-- 18. Write a query to find customers whose `age` is in (18, 25, 30, 40).  
SELECT *
FROM Customer
WHERE age IN (18,25,30,40);

-- 19. Write a query to display officers whose designation is either `Inspector` or `Constable`.
SELECT *
FROM Officers
WHERE designation IN ('INSPECTOR', 'CONSTABLE');

-- 20. How do you exclude customers whose ID is in (1, 2, 3, 4)?
SELECT *
FROM Customer
WHERE customer_id NOT IN (1,2,3,4);

-- 21. Write a query to select customers from `Delhi` AND with age greater than 25.  
SELECT *
FROM Customer
WHERE city = 'Delhi' AND age >= 25;

-- 22. Write a query to select customers who are either from `Mumbai` OR have age less than 20.
SELECT *
FROM Customer
WHERE city = 'Mumbai' OR age < 20;

-- 23. Use `NOT` to exclude customers from `Kolkata`.  
SELECT *
FROM Customer
WHERE NOT city = 'Kolkata';

-- 24. Write a query to find officers whose `rank` is NOT `Major`.
SELECT *
FROM Officers
WHERE NOT rank = 'MAJOR';

-- 25. How do you combine `AND` and `OR` in a single query?
SELECT *
FROM Officers
WHERE (designation = 'INSPECTOR' AND salary > 44000) OR (designation = 'CONSTABLE' AND joining_year > 2016);

-- 26. Write a query to find customers whose `prime_status` is NULL.
SELECT *
FROM Customer
WHERE prime_status IS NULL;

-- 27. How do you find customers whose `email` is NOT NULL?
SELECT *
FROM Customer
WHERE email IS NOT NULL;

-- 28. Write a query to display all officers who have NULL `address`.  
SELECT *
FROM Officers
WHERE address IS NULL;

-- 30. Write a query to count how many customers have NULL in `phone_number`.  
SELECT COUNT(*) null_phone_number
FROM Customer
WHERE phone_number IS NULL;

-- ## Functions (DUAL table style)

-- 31. Write a query to add 25 + 75 without using any table.
SELECT 25 + 72 AS Addition;

-- 32. Write a query to display current timestamp.  
SELECT CURRENT_TIMESTAMP AS Current_Date_and_Time;

-- 33. Write a query to find length of the string "Database".
SELECT LEN('Database') AS String_Length;

-- 34. Write a query to display "hello world" in uppercase.
SELECT UPPER('anurag sahu') AS Uppercase_String;

-- 35. Write a query to display square root of 144.
SELECT SQRT(144) AS Square_Root;

-- 36. Write a query to find customers with age > 20 AND city = `Delhi`.
SELECT *
from Customer
WHERE age > 20 AND city = 'Delhi';

-- 37. Write a query to find customers with prime_status = NULL OR age < 18.   n
SELECT *
FROM Customer
WHERE age < 18 OR prime_status IS NULL;

-- 38. Write a query to find customers whose name is in (`Lakshay`, `Deepika`) AND age > 30.
SELECT *
FROM Customer
WHERE customer_name IN ('Lakshay','Deepika') AND age > 30;

-- 39. Write a query to find customers with salary between 40,000 AND 60,000 AND city in (`Delhi`, `Mumbai`).  
SELECT *
FROM Officers
WHERE salary BETWEEN 40000 AND 60000 AND address IN ('Delhi','Mumbai');

-- 40. Write a query to display customers not from (`Kolkata`, `Bangalore`).  
SELECT *
FROM Customer
WHERE NOT city IN ('kolkata','bangalore');

-- 46. Write a query to display all unique cities from the `customer` table.  
SELECT DISTINCT city
FROM Customer;

-- 47. Write a query to count total number of customers.  
SELECT COUNT(*) AS Total_Customers
FROM Customer;

-- 48. Write a query to find average age of customers.  
SELECT AVG(age) AS Average_Age
FROM Customer;

-- 49. Write a query to get maximum salary from `officers`.
SELECT MAX(salary) AS Highest_Salary
FROM Officers;

-- 50. Write a query to display minimum age from `customer`.  
SELECT MIN(age) as Minimum_Age
FROM Customer;



-- 1. Find customers whose name starts with letter `A`.  
SELECT *
FROM Customer
WHERE customer_name LIKE 'A%';

-- 2. Find customers whose name ends with `n`.
SELECT *
FROM Customer
WHERE customer_name LIKE '%n';

-- 3. Find customers whose name contains `raj`.
SELECT *
FROM Customer
WHERE customer_name LIKE '%anu%';

-- 4. Find customers whose name has exactly 5 characters.
SELECT *
FROM Customer
WHERE customer_name LIKE '_____';

-- 5. Find customers whose name has second character `a`. 
SELECT *
FROM Customer
WHERE customer_name LIKE '_a%';

-- 6. Find customers whose city starts with `D`. 
SELECT *
FROM Customer
WHERE city LIKE 'D%';

-- 7. Find customers whose city ends with `i`.  
SELECT *
FROM Customer
WHERE city LIKE '%i';

-- 8. Find customers whose email contains `gmail`.  
SELECT *
FROM Customer
WHERE email LIKE '%gmail%';

-- 9. Find customers whose name starts with `S` and has at least 3 characters.
SELECT *
FROM Customer
WHERE customer_name LIKE 'S___%';

-- 10. Find customers whose name ends with `p` and has exactly 4 characters.
SELECT *
FROM Customer
WHERE customer_name LIKE '%____p';

-- 11. Display all customers sorted by name in ascending order. 
SELECT *
FROM Customer
ORDER BY customer_name ASC;

-- 12. Display all customers sorted by name in descending order. 
SELECT *
FROM Customer
ORDER BY customer_name DESC;

-- 13. Display customers sorted by age ascending.
SELECT *
FROM Customer
ORDER BY age ASC;

-- 14. Display customers sorted by age descending.  
SELECT *
FROM Customer
ORDER BY age DESC;

-- 15. Display officers sorted by salary highest first
SELECT *
FROM Officers
ORDER BY salary DESC;

-- 16. Display officers sorted by joining_year oldest first.
SELECT *
FROM Officers
ORDER BY joining_year ASC;

-- 17. Display customers sorted by city ascending, then by name ascending.  
SELECT *
FROM Customer
ORDER BY city ASC , customer_name ASC;

-- 18. Display customers sorted by prime_status (Yes first). 
SELECT *
FROM Customer
ORDER BY prime_status DESC;

-- 19. Display officers sorted by rank and then by salary descending.
SELECT *
FROM Officers
ORDER BY [rank] ASC , salary DESC;

-- 20. Display customers sorted by email NULL values last.
-- Sorting such that NULL values appear last 
-- syntext :- ORDER BY CASE WHEN <condition> THEN <priority> ELSE <priority> END
SELECT *
FROM Customer
ORDER BY CASE WHEN email IS NULL THEN 1 ELSE 0 END, email ASC;

-- 21. Find number of customers in each city.
SELECT COUNT(city) AS Number_of_Customer , city
FROM Customer
GROUP BY city;

-- 22. Find average age of customers city-wise
SELECT AVG(age) AS Average_Age_Of_Customers, city
FROM Customer
GROUP BY city;

-- 23. Find total salary paid to officers rank-wise.
SELECT SUM(salary) AS Total_Salary_Rank_Wise , [rank]
FROM Officers
GROUP BY [rank];

-- 24. Find maximum salary of each designation. 
SELECT MAX(salary) AS Max_Salary_For_Designation, designation
FROM Officers
GROUP BY designation;

-- 25. Find minimum joining_year of each rank. 
SELECT [rank] , MIN(joining_year) AS Minimun_Joining_Year
FROM Officers
GROUP BY [rank];

-- 26. Count customers who have prime_status = ‘Yes’ city-wise. 
SELECT COUNT(prime_status) AS COUNT_CUSTOMER, city
FROM Customer
WHERE prime_status = 'Yes'
GROUP BY city;

-- 27. Find how many customers have NULL email grouped by city. 
SELECT COUNT(*) AS Number_of_Customer, city
FROM Customer
WHERE email IS NULL
GROUP BY city;

-- 28. Find number of officers joined each year. 
SELECT COUNT(*) AS Number_of_Officers, joining_year
FROM Officers
GROUP BY joining_year;

-- 29. Find average salary of officers rank-wise. 
SELECT AVG(salary) AS AVERAGE_SALARY, [rank]
FROM Officers
GROUP BY [rank];

-- 30. Find maximum and minimum age of customers city-wise.  
SELECT city, MIN(age) AS Minimum_Age, MAX(age) AS Maximum_Age
FROM Customer
GROUP BY city;

-- 31. Display city-wise count of customers where age > 20. 
SELECT COUNT(*) AS Count_Of_Customers, city
FROM Customer
WHERE age > 20
GROUP BY city;

-- 32. Display average salary of officers who joined after 2015 grouped by designation.  
SELECT AVG(salary) AS AVERAGE_SALARY, designation
FROM Officers
WHERE joining_year > 2015
GROUP BY designation;

-- 33. Display count of customers prime_status = NULL grouped by city.  
SELECT COUNT(*) AS Count_Of_Customers, city
FROM Customer
WHERE prime_status IS NULL
GROUP BY city;

-- 34. Display officers rank-wise max salary, ordered by salary descending. 
SELECT MAX(salary) AS Maximum_Salary, [rank]
FROM Officers
GROUP BY [rank]
ORDER BY Maximum_Salary DESC;

-- 35. Display city-wise number of customers, sorted by count descending.  
SELECT COUNT(*) AS Number_of_Customer, city
FROM Customer
GROUP BY city
ORDER BY Number_of_Customer DESC;

-- 36. Display designation-wise officer count, sorted alphabetically.  
SELECT COUNT(*) AS Number_of_Officers, designation
FROM Officers
GROUP BY designation
ORDER BY designation;

-- 37. Display rank-wise total salary where salary > 40000.  
SELECT SUM(salary) AS Total_Salary_Rank_Wise, [rank]
FROM Officers
WHERE salary > 40000
GROUP BY [rank]

-- 38. Display city-wise customers average age, only for cities starting with `D`.  
SELECT AVG(age) AS Average_Age, city
FROM Customer
WHERE city LIKE 'D%'
GROUP BY city

-- 39. Display designation-wise highest paid officer salary.  
SELECT MAX(SALARY) AS Maximum_Salary, designation
FROM Officers
GROUP BY designation;

-- 40. Display year-wise officer count ordered by year ascending.
SELECT COUNT(*) AS Number_of_Officers, joining_year
FROM Officers
GROUP BY joining_year
ORDER BY joining_year;

-- 41. Write a query to display customers whose city starts with `M` and order them by name.  
SELECT *
FROM Customer
WHERE city LIKE 'M%'
ORDER BY customer_name;

-- 42. Write a query to display officers whose name ends with `a` ordered by salary descending.
SELECT *
FROM Officers
WHERE officer_name LIKE '%a'
ORDER BY salary DESC;

-- 43. Find number of customers in each prime_status group (Yes, No, NULL).
SELECT prime_status , COUNT(*) AS Number_of_Customer
FROM Customer
GROUP BY prime_status;

-- 44. Find average salary of officers designation-wise where salary < 60000.  
SELECT AVG(salary) AS AVERAGE_SALARY, designation
FROM Officers
WHERE salary < 60000
GROUP BY designation;

-- 45. Find customers name length > 5 ordered by city.  
SELECT *
FROM Customer
WHERE LEN(customer_name) > 5
ORDER BY city;

-- 46. Find officers whose name has `_` as second character.  
SELECT *
FROM Officers
WHERE officer_name LIKE '_%'

-- 47. Find max, min, avg salary of officers grouped by city.
SELECT MAX(salary) AS Maximum_Salary, MIN(salary) AS Minimum_salary, AVG(salary) AS AVERAGE_SALARY, designation
FROM Officers
GROUP BY designation;

-- 48. Find customers city-wise sorted by average age descending.  
SELECT AVG(age) AS Average_Age, city
FROM Customer
GROUP BY city
ORDER BY Average_Age DESC;

-- 49. Find officer designation-wise total salary sorted by total salary descending.  
SELECT SUM(salary) AS Total_Salary, designation
FROM Officers
GROUP BY designation
ORDER BY Total_Salary DESC;

-- 50. Find city-wise customers count where prime_status is NULL.  
SELECT COUNT(*) AS Number_of_Customer, city
FROM Customer
WHERE prime_status IS NULL
GROUP BY city;


-- 1. Find all distinct cities from the customer table. 
SELECT DISTINCT city
FROM Customer;

-- 2. Find distinct prime status values in the customer table.
SELECT DISTINCT prime_status
FROM Customer;

-- 3. Get distinct customer ages. 
SELECT DISTINCT age
FROM Customer;

-- 4. Find distinct email IDs of customers.  
SELECT DISTINCT email
FROM Customer;

-- 5. List distinct officer designations.  
SELECT DISTINCT designation
FROM Officers;

-- 6. Get distinct officer ranks.  
SELECT DISTINCT [rank]
FROM Officers;

-- 7. Find distinct officer joining years.  
SELECT DISTINCT joining_year
FROM Officers;

-- 8. Find all distinct salary values of officers.  
SELECT DISTINCT salary
FROM Officers;

-- 9. Find distinct customer cities who have prime status as "Yes".  
SELECT DISTINCT city
FROM Customer
WHERE prime_status = 'Yes';

-- 10. Find distinct customer names starting with 'A'.  
SELECT DISTINCT customer_name
FROM Customer
WHERE customer_name LIKE 'A%';

-- 11. List distinct phone numbers from customer table.  
SELECT DISTINCT phone_number
FROM Customer;

-- 12. Get distinct customers who live in Delhi. 
SELECT DISTINCT customer_name
FROM Customer
WHERE city = 'Delhi';

-- 13. Find distinct officer addresses.  
SELECT DISTINCT address
FROM Officers;

-- 14. Find distinct officer designations where salary > 40000.  
SELECT DISTINCT designation
FROM Officers
WHERE salary > 40000;

-- 15. Find distinct ages of customers who are prime users.  
SELECT DISTINCT age
FROM Customer
WHERE prime_status = 'Yes';

-- 16. Get distinct combinations of customer name and city.  
SELECT DISTINCT customer_name, city
FROM Customer;

-- 17. Find distinct officer names having designation = 'Inspector'. 
SELECT DISTINCT officer_name
FROM Officers
WHERE designation = 'INSPECTOR';

-- 18. Find distinct customer names where email is NULL.  
SELECT DISTINCT customer_name
FROM Customer
WHERE email IS NULL;

-- 19. Get distinct officer joining years where rank = 'Major'.  
SELECT DISTINCT joining_year
FROM Officers
WHERE [rank] = 'MAJOR';

-- 20. Find distinct customer prime status excluding NULL values.  
SELECT DISTINCT prime_status
FROM Customer
WHERE prime_status IS NOT NULL;

-- 21. List distinct officer salary values in descending order.  
SELECT DISTINCT salary
FROM Officers
ORDER BY salary DESC;

-- 22. Find distinct cities from customer table where age > 25.  
SELECT DISTINCT city
FROM Customer
WHERE age >25;

-- 23. Find distinct officer names who joined before 2018.
SELECT DISTINCT officer_name
FROM Officers
WHERE joining_year < 2018;

-- 24. Find distinct customer emails where city = 'Mumbai'.  
SELECT DISTINCT email
FROM Customer
WHERE city = 'Mumbai';

-- 25. Get distinct officer ranks where designation = 'Constable'.
SELECT DISTINCT [rank]
FROM Officers
WHERE designation = 'CONSTABLE';

-- 26. Count number of customers in each city.  
SELECT COUNT(*) AS Number_of_Customer, city
FROM Customer
GROUP BY city;

-- 27. Find cities having more than 2 customers.
SELECT city
FROM Customer
GROUP BY city
HAVING COUNT(*) > 2;

-- 28. Find prime status categories with customer count.
SELECT COUNT(*) AS Number_of_Customer , prime_status
FROM Customer
GROUP BY prime_status;

-- 29. Find prime status categories with more than 2 customers.  
SELECT prime_status
FROM Customer
GROUP BY prime_status
HAVING COUNT(*) > 2;

-- 30. Count number of officers by designation.  
SELECT COUNT(*) AS Number_of_Officers, designation
FROM Officers
GROUP BY designation;

-- 31. Find officer designations having more than 1 officer.
SELECT designation
FROM Officers
GROUP BY designation
HAVING COUNT(*) > 1;

-- 32. Find total salary by designation.  
SELECT SUM(salary), designation
FROM Officers
GROUP BY designation;

-- 33. Find designations where total salary > 100000.  
SELECT designation
FROM Officers
GROUP BY designation
HAVING SUM(salary) > 100000;

-- 34. Find average customer age in each city.  
SELECT AVG(age) AS Average_Age, city
FROM Customer
GROUP BY city;

-- 35. Find cities where average age > 25.  
SELECT city
FROM Customer
GROUP BY city
HAVING AVG(age) > 25;

-- 36. Find minimum and maximum salary by officer rank.  
SELECT MIN(salary) AS Minimum_salary, MAX(salary) AS Maximum_Salary, [rank]
FROM Officers
GROUP BY [rank];

-- 37. Find ranks where maximum salary > 60000.  
SELECT [rank]
FROM Officers
GROUP BY [rank]
HAVING MAX(salary) > 60000;

-- 38. Count customers in each prime status group.  
SELECT COUNT(*) AS Number_of_Customer, prime_status
FROM Customer
GROUP BY prime_status;

-- 39. Find prime status groups with more than 1 customer.  
SELECT prime_status
FROM Customer
GROUP BY prime_status
HAVING COUNT(*) > 1;

-- 40. Find officer joining years with officer count.  
SELECT COUNT(*) AS Number_of_Officers, joining_year
FROM Officers
GROUP BY joining_year;

-- 41. Find joining years having more than 2 officers.  
SELECT joining_year
FROM Officers
GROUP BY joining_year
HAVING COUNT(*) > 2;

-- 42. Find total salary per joining year.  
SELECT SUM(salary) AS Total_Salary, joining_year
FROM Officers
GROUP BY joining_year;

-- 43. Find joining years where total salary > 120000.  
SELECT joining_year
FROM Officers
GROUP BY joining_year
HAVING SUM(salary) > 120000;

-- 44. Find cities with maximum customer age.
SELECT MAX(age) AS Maximum_Age, city
FROM Customer
GROUP BY city;

-- 45. Find cities where maximum customer age > 40.  
SELECT city
FROM Customer
GROUP BY city
HAVING MAX(age) > 40;

-- 46. Find designation-wise average salary.  
SELECT AVG(salary) AS AVERAGE_SALARY, designation
FROM Officers
GROUP BY designation;

-- 47. Find designations where average salary > 45000.  
SELECT designation
FROM Officers
GROUP BY designation
HAVING AVG(salary) > 45000;

-- 48. Find officer addresses with officer count.  
SELECT address, COUNT(*) AS Number_of_Officers
FROM Officers
GROUP BY address;

-- 49. Find addresses having more than 1 officer.  
SELECT address
FROM Officers
GROUP BY address
HAVING COUNT(*) > 1;

-- 50. Find city-wise total customers where count > 1.  
SELECT COUNT(*) AS Number_of_Customers, city
FROM Customer
GROUP BY city
HAVING COUNT(*) > 1;
